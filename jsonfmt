#!/bin/bash

# JSON Formatter & Validator CLI
# Lightweight tool for JSON validation and formatting

VERSION="1.0.0"
SCRIPT_NAME="jsonfmt"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to display help
show_help() {
    cat << EOF
${CYAN}JSON Formatter & Validator CLI v${VERSION}${NC}

${YELLOW}Usage:${NC}
    $SCRIPT_NAME [options] [json_string]
    $SCRIPT_NAME -f <file> [options]
    echo '{"data": "value"}' | $SCRIPT_NAME

${YELLOW}Options:${NC}
    -f, --file <file>        JSON file to process
    -o, --output <file>      Save result to file
    -i, --indent <number>    Number of spaces for indentation (default: 2)
    --info                   Show additional information
    -h, --help              Show this help
    -v, --version           Show version

${YELLOW}Examples:${NC}
    $SCRIPT_NAME '{"name": "John", "age": 30}'
    $SCRIPT_NAME -f data.json
    $SCRIPT_NAME -f input.json -o output.json
    $SCRIPT_NAME -f data.json --info
    echo '{"test": true}' | $SCRIPT_NAME

${YELLOW}Requirements:${NC}
    - jq (JSON processor)
    - bash 4.0+

EOF
}

# Function to display version
show_version() {
    echo "${CYAN}${SCRIPT_NAME} v${VERSION}${NC}"
}

# Function to check jq availability
check_jq() {
    if ! command -v jq &> /dev/null; then
        echo -e "${RED}‚ùå Error: jq is not installed${NC}"
        echo -e "${YELLOW}Install jq:${NC}"
        echo "  Ubuntu/Debian: sudo apt install jq"
        echo "  CentOS/RHEL: sudo yum install jq"
        echo "  macOS: brew install jq"
        exit 1
    fi
}

# Function to validate JSON
validate_json() {
    local json_input="$1"
    local source="$2"
    
    if echo "$json_input" | jq . >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ JSON is valid (${source})${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Invalid JSON (${source}):${NC}"
        echo -e "${RED}   $(echo "$json_input" | jq . 2>&1 | head -1)${NC}"
        return 1
    fi
}

# Function to format JSON
format_json() {
    local json_input="$1"
    local indent="${2:-2}"
    
    echo "$json_input" | jq . --indent "$indent"
}

# Function to get JSON information
get_json_info() {
    local json_input="$1"
    
    echo -e "${YELLOW}üìä JSON Information:${NC}"
    
    # Root element type
    local root_type=$(echo "$json_input" | jq -r 'type')
    echo -e "${YELLOW}   Root element type: ${root_type^}${NC}"
    
    # Size in characters
    local size=$(echo "$json_input" | jq -c . | wc -c)
    echo -e "${YELLOW}   Size: $((size-1)) characters${NC}"
    
    # Additional information based on type
    if [[ "$root_type" == "array" ]]; then
        local length=$(echo "$json_input" | jq 'length')
        echo -e "${YELLOW}   Number of elements: $length${NC}"
    elif [[ "$root_type" == "object" ]]; then
        local keys=$(echo "$json_input" | jq 'keys | length')
        echo -e "${YELLOW}   Number of properties: $keys${NC}"
    fi
}

# Function to read file
read_file() {
    local file_path="$1"
    
    if [[ ! -f "$file_path" ]]; then
        echo -e "${RED}‚ùå File not found: $file_path${NC}"
        return 1
    fi
    
    if [[ ! -r "$file_path" ]]; then
        echo -e "${RED}‚ùå No read permission for file: $file_path${NC}"
        return 1
    fi
    
    cat "$file_path"
}

# Function to write to file
write_file() {
    local file_path="$1"
    local content="$2"
    
    if echo "$content" > "$file_path" 2>/dev/null; then
        echo -e "${GREEN}üìù Formatted JSON saved to: $file_path${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Error writing to file: $file_path${NC}"
        return 1
    fi
}

# Main processing function
process_json() {
    local json_input="$1"
    local source="$2"
    local output_file="$3"
    local indent="$4"
    local show_info="$5"
    
    # Validate JSON
    if ! validate_json "$json_input" "$source"; then
        return 1
    fi
    
    # Format JSON
    local formatted=$(format_json "$json_input" "$indent")
    
    # Output result
    if [[ -n "$output_file" ]]; then
        if write_file "$output_file" "$formatted"; then
            # Don't output content if saving to file
            return 0
        else
            return 1
        fi
    else
        echo -e "${CYAN}üìã Formatted JSON:${NC}"
        echo "$formatted"
    fi
    
    # Show additional information
    if [[ "$show_info" == "true" ]]; then
        echo
        get_json_info "$json_input"
    fi
}

# Parse arguments
INPUT_FILE=""
OUTPUT_FILE=""
INDENT=2
SHOW_INFO=false
JSON_STRING=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -f|--file)
            INPUT_FILE="$2"
            shift 2
            ;;
        -o|--output)
            OUTPUT_FILE="$2"
            shift 2
            ;;
        -i|--indent)
            INDENT="$2"
            shift 2
            ;;
        --info)
            SHOW_INFO=true
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        -v|--version)
            show_version
            exit 0
            ;;
        -*)
            echo -e "${RED}‚ùå Unknown option: $1${NC}"
            echo "Use --help for help"
            exit 1
            ;;
        *)
            if [[ -z "$JSON_STRING" ]]; then
                JSON_STRING="$1"
            else
                echo -e "${RED}‚ùå Too many arguments${NC}"
                exit 1
            fi
            shift
            ;;
    esac
done

# Check jq availability
check_jq

# Determine JSON source
if [[ -n "$INPUT_FILE" ]]; then
    # Read from file
    if ! JSON_CONTENT=$(read_file "$INPUT_FILE"); then
        exit 1
    fi
    SOURCE="file: $INPUT_FILE"
elif [[ -n "$JSON_STRING" ]]; then
    # Use provided string
    JSON_CONTENT="$JSON_STRING"
    SOURCE="string"
elif [[ ! -t 0 ]]; then
    # Read from stdin
    JSON_CONTENT=$(cat)
    SOURCE="stdin"
else
    echo -e "${RED}‚ùå No JSON source specified${NC}"
    echo "Use --help for help"
    exit 1
fi

# Process JSON
if ! process_json "$JSON_CONTENT" "$SOURCE" "$OUTPUT_FILE" "$INDENT" "$SHOW_INFO"; then
    exit 1
fi 